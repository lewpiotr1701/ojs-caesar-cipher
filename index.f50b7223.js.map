{"mappings":"IAqCAA,EArCA,SAAkBC,IAgClB,SAAoBA,GAClB,GAAc,KAAVA,EAAc,MAAM,IAAIC,MAAM,0BAClC,GAAqB,iBAAVD,EAAoB,MAAM,IAAIC,MAAM,yBACjD,CAlCEC,CAAWF,GAEX,MAAMG,EAAWH,EAAMI,MAAM,IAEvBC,EAAe,GAMrB,OAJAF,EAASG,SAAQC,IACfF,EAAaG,KAMjB,SAAsBD,GACpB,MAAO,WAAaE,KAAKF,EAC3B,CARsBG,CAAaH,GAUnC,SAAsBI,GACpB,MAAMC,EAAcD,EAAOE,WAAW,GAEtC,GAAI,QAAUJ,KAAKE,GAAS,CAC1B,MAAMG,GAAuBF,EAAe,GAAM,IAAM,GAAM,GAC9D,OAAOG,OAAOC,aAAaF,EAC7B,CAEA,GAAI,QAAUL,KAAKE,GAAS,CAC1B,MAAMG,GAAuBF,EAAe,GAAM,IAAM,GAAM,GAC9D,OAAOG,OAAOC,aAAaF,EAC7B,CACF,CAtB2CG,CAAaV,GAAQA,EAAI,IAG3DF,EAAaa,KAAK,GAC3B,ECVA,MAAMC,EAAeC,SAASC,cAAc,UACtCC,EAAgBF,SAASC,cAAc,WAE7CF,EAAaI,iBAAiB,SAE9B,SAAqBC,GACnB,GAAuB,KAAnBA,EAAEC,OAAOC,MAEX,OADAJ,EAAcK,YAAc,GACrB,EAET,MAAMC,EAAiB7B,EAASyB,EAAEC,OAAOC,OACzCJ,EAAcK,YAAcC,CAC9B","sources":["src/modules/caesar.js","src/app.js"],"sourcesContent":["function caesar13(input) {\r\n  checkInput(input);\r\n\r\n  const inputArr = input.split('');\r\n\r\n  const encodedInput = [];\r\n\r\n  inputArr.forEach(char => {\r\n    encodedInput.push(shouldEncode(char) ? encodeLetter(char) : char);\r\n  });\r\n\r\n  return encodedInput.join('');\r\n}\r\n\r\nfunction shouldEncode(char) {\r\n  return (/[a-zA-Z]/).test(char)\r\n}\r\n\r\nfunction encodeLetter(letter) {\r\n  const ASCIINumber = letter.charCodeAt(0);\r\n\r\n  if ((/[a-z]/).test(letter)) {\r\n    const encodedASCIINumber = (((ASCIINumber - 97) + 13) % 26) + 97;\r\n    return String.fromCharCode(encodedASCIINumber);\r\n  }\r\n\r\n  if ((/[A-Z]/).test(letter)) {\r\n    const encodedASCIINumber = (((ASCIINumber - 65) + 13) % 26) + 65;\r\n    return String.fromCharCode(encodedASCIINumber);\r\n  }\r\n}\r\n\r\nfunction checkInput(input) {\r\n  if (input === '') throw new Error('Input can not be empty');\r\n  if (typeof input !== 'string') throw new Error('Input must be a string');\r\n}\r\n\r\nexport default caesar13","import caesar13 from \"./modules/caesar\";\r\n\r\nconst inputMessage = document.querySelector('.input');\r\nconst outputMessage = document.querySelector('.output');\r\n\r\ninputMessage.addEventListener('input', showMessage);\r\n\r\nfunction showMessage(e) {\r\n  if (e.target.value === '') {\r\n    outputMessage.textContent = '';\r\n    return 0;\r\n  }\r\n  const encodedMessage = caesar13(e.target.value);\r\n  outputMessage.textContent = encodedMessage;\r\n}"],"names":["$0a3e834ae27c7445$export$2e2bcd8739ae039","input","Error","$0a3e834ae27c7445$var$checkInput","inputArr","split","encodedInput","forEach","char","push","test","$0a3e834ae27c7445$var$shouldEncode","letter","ASCIINumber","charCodeAt","encodedASCIINumber","String","fromCharCode","$0a3e834ae27c7445$var$encodeLetter","join","$e73bf42412feb220$var$inputMessage","document","querySelector","$e73bf42412feb220$var$outputMessage","addEventListener","e","target","value","textContent","encodedMessage"],"version":3,"file":"index.f50b7223.js.map"}